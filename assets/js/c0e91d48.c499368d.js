"use strict";(self.webpackChunkctdlct_177_2=self.webpackChunkctdlct_177_2||[]).push([[7195],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var o=r.createContext({}),p=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},u=function(n){var e=p(n.components);return r.createElement(o.Provider,{value:e},n.children)},h={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,o=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),s=p(t),m=a,d=s["".concat(o,".").concat(m)]||s[m]||h[m]||i;return t?r.createElement(d,l(l({ref:e},u),{},{components:t})):r.createElement(d,l({ref:e},u))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,l=new Array(i);l[0]=s;var c={};for(var o in e)hasOwnProperty.call(e,o)&&(c[o]=e[o]);c.originalType=n,c.mdxType="string"==typeof n?n:a,l[1]=c;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},1450:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:3},l="S\u1eed d\u1ee5ng c\xe2y",c={unversionedId:"adts-binary-tree/apply",id:"adts-binary-tree/apply",title:"S\u1eed d\u1ee5ng c\xe2y",description:"Hello m\u1ecdi ng\u01b0\u1eddi toi l\xe0 MINH MINH : )))",source:"@site/docs/adts-binary-tree/apply.md",sourceDirName:"adts-binary-tree",slug:"/adts-binary-tree/apply",permalink:"/docs/adts-binary-tree/apply",draft:!1,editUrl:"https://github.com/thangved/datastructure/docs/adts-binary-tree/apply.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\u0110\u1ecbnh ngh\u0129a",permalink:"/docs/adts-binary-tree/define"},next:{title:"T\u1ed5ng quan",permalink:"/docs/adts-binary-search-tree/intro"}},o={},p=[{value:"Problem 1 <strong>createTree</strong>",id:"problem-1-createtree",level:2},{value:"Problem 2 <strong>findMax</strong>",id:"problem-2-findmax",level:2},{value:"Problem 3 <strong>findElement</strong>",id:"problem-3-findelement",level:2},{value:"Problem 4 <strong>getDiameter</strong>",id:"problem-4-getdiameter",level:2},{value:"Problem 5 <strong>getFullNodes</strong>",id:"problem-5-getfullnodes",level:2},{value:"Problem 6 <strong>convertTree</strong>",id:"problem-6-converttree",level:2},{value:"Problem 7 <strong>isMirrors</strong>",id:"problem-7-ismirrors",level:2},{value:"Problem 8 <strong>printAllPaths</strong>",id:"problem-8-printallpaths",level:2}],u={toc:p};function h(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"s\u1eed-d\u1ee5ng-c\xe2y"},"S\u1eed d\u1ee5ng c\xe2y"),(0,a.kt)("admonition",{title:"HI!",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Hello m\u1ecdi ng\u01b0\u1eddi toi l\xe0 ",(0,a.kt)("strong",{parentName:"p"},"MINH MINH")," : )))"),(0,a.kt)("p",{parentName:"admonition"},"\xc0 nh\u1ea7m, toi l\xe0 ",(0,a.kt)("strong",{parentName:"p"},"Z\u1ecaT")),(0,a.kt)("p",{parentName:"admonition"},"D\u01b0\u1edbi \u0111\xe2y l\xe0 m\u1ed9t s\u1ed1 n\xf3i c\xe1ch kh\xe1c l\xe0 ",(0,a.kt)("strong",{parentName:"p"},"T\u1ea4T C\u1ea2")," ph\xe9p to\xe1n \u0111\u01b0\u1ee3c c\xe0i \u0111\u1eb7t s\u1eb5n, c\xe1c b\u1ea1n s\u1ebd s\u1eed d\u1ee5ng l\u1ea1i nh\u1eefng ph\xe9p to\xe1n \u0111\u1ec3 c\xe0i \u0111\u1eb7t m\u1ed9t s\u1ed1 h\xe0m hay n\xf3i c\xe1ch kh\xe1c l\xe0 ",(0,a.kt)("strong",{parentName:"p"},"T\u1ea4T C\u1ea2")," theo y\xeau c\u1ea7u b\xean d\u01b0\u1edbi.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"typedef char DataType;\nstruct Node {\n    DataType     Data;\n    struct Node *Left,*Right;\n };\ntypedef struct Node* Tree;\nvoid makenullTree(Tree* pT)\nint emptyTree(Tree T)\nTree\nleftChild(Tree n)\nTree rightChild(Tree n)\nint isLeaf(Tree n)\nint getLeaves(Tree T) /* h\xe0m tr\u1ea3 v\u1ec1 s\u1ed1 n\xfat l\xe1 tr\xean c\xe2y */\nvoid preOrder(Tree T)\nvoid inOrder(Tree T)\nvoid postOrder(Tree T)\n")),(0,a.kt)("h2",{id:"problem-1-createtree"},"Problem 1 ",(0,a.kt)("strong",{parentName:"h2"},"createTree")),(0,a.kt)("p",null,"Gi\u1ea3 s\u1eed ",(0,a.kt)("inlineCode",{parentName:"p"},"h\xe0m findIndex()")," t\xecm ch\u1ec9 m\u1ee5c c\u1ee7a m\u1ed9t k\xfd t\u1ef1 x trong chu\u1ed7i bi\u1ec3u th\u1ee9c trung t\u1ef1 in b\u1eaft \u0111\u1ea7u t\u1eeb v\u1ecb tr\xed star \u0111\u1ebfn v\u1ecb tr\xed end c\u0169ng \u0111\xe3 \u0111\u01b0\u1ee3c c\xe0i \u0111\u1eb7t:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int findIndex(DataType x, char in[], int star, int end){\n    int i=star;\n    while (i<=end){\n         if (x==in[i])\n             return i;\n         else\n             i++;\n   }\n   return i;\n}\n")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m ",(0,a.kt)("inlineCode",{parentName:"p"},"createTree()")," cho ph\xe9p d\u1ef1ng m\u1ed9t c\xe2y nh\u1ecb ph\xe2n t\u1eeb c\xe1c bi\u1ec3u th\u1ee9c duy\u1ec7t ti\u1ec1n t\u1ef1 v\xe0 trung t\u1ef1."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Chu\u1ed7i ch\u1ee9a bi\u1ec3u th\u1ee9c ti\u1ec1n t\u1ef1. V\xed d\u1ee5: "DBEAFC".'),(0,a.kt)("li",{parentName:"ul"},'Chu\u1ed7i ch\u1ee9a bi\u1ec3u th\u1ee9c trung t\u1ef1. V\xed d\u1ee5: "ABDECF".'),(0,a.kt)("li",{parentName:"ul"},"Ch\u1ec9 s\u1ed1 b\u1eaft \u0111\u1ea7u c\u1ee7a ph\u1ea7n chu\u1ed7i trung t\u1ef1 \u0111\u01b0\u1ee3c x\xe9t. V\xed d\u1ee5: 0"),(0,a.kt)("li",{parentName:"ul"},"Ch\u1ec9 s\u1ed1 k\u1ebft th\xfac c\u1ee7a ph\u1ea7n chu\u1ed7i trung t\u1ef1 \u0111\u01b0\u1ee3c x\xe9t: V\xed d\u1ee5: 5"),(0,a.kt)("li",{parentName:"ul"},"D\u1eef li\u1ec7u \u0111\u1ea7u ra: con tr\u1ecf tr\u1ecf \u0111\u1ebfn n\xfat g\u1ed1c c\u1ee7a c\xe2y nh\u1ecb ph\xe2n \u0111\u01b0\u1ee3c t\u1ea1o ra t\u1eeb hai bi\u1ec3u th\u1ee9c ti\u1ec1n t\u1ef1 v\xe0 trung t\u1ef1. (xem th\xeam c\xe1c test case)")),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int CURRENT_INDEX = 0;\n\nTree createTree(char *pre, char *in, int start, int end)\n{\n    if (start > end)\n        return NULL;\n    Tree T = (Tree)malloc(sizeof(struct Node));\n    if (start == end)\n    {\n        T->Data = pre[CURRENT_INDEX];\n        T->Left = NULL;\n        T->Right = NULL;\n        CURRENT_INDEX++;\n        return T;\n    }\n    T->Data = pre[CURRENT_INDEX];\n    int i = findIndex(pre[CURRENT_INDEX], in, start, end);\n    CURRENT_INDEX++;\n    T->Left = createTree(pre, in, start, i - 1);\n    T->Right = createTree(pre, in, i + 1, end);\n    return T;\n}\n"))),(0,a.kt)("h2",{id:"problem-2-findmax"},"Problem 2 ",(0,a.kt)("strong",{parentName:"h2"},"findMax")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m ",(0,a.kt)("inlineCode",{parentName:"p"},"findMax()")," t\xecm gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t trong c\xe2y nh\u1ecb ph\xe2n."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: c\xe2y nh\u1ecb ph\xe2n"),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t trong c\xe2y nh\u1ecb ph\xe2n."),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int findMax(Tree T)\n{\n    if (T==NULL)\n        return 0;\n    if (isLeaf(T))\n        return T->Data;\n    int maxLeft = findMax(T->Left);\n    int maxRight = findMax(T->Right);\n    return maxLeft > maxRight ? maxLeft : maxRight;\n}\n"))),(0,a.kt)("h2",{id:"problem-3-findelement"},"Problem 3 ",(0,a.kt)("strong",{parentName:"h2"},"findElement")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m ",(0,a.kt)("inlineCode",{parentName:"p"},"findElement()")," x\xe1c \u0111\u1ecbnh xem x c\xf3 l\xe0 gi\xe1 tr\u1ecb c\u1ee7a m\u1ed9t n\xfat trong c\xe2y nh\u1ecb ph\xe2n hay kh\xf4ng."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: m\u1ed9t gi\xe1 tr\u1ecb x c\xf3 ki\u1ec3u DataType v\xe0 m\u1ed9t c\xe2y nh\u1ecb ph\xe2n T."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: tr\u1ea3 v\u1ec1 c\xe2y c\xf3 n\xfat g\u1ed1c c\xf3 d\u1eef li\u1ec7u b\u1eb1ng v\u1edbi x n\u1ebfu t\xecm th\u1ea5y ho\u1eb7c c\xe2y r\u1ed7ng n\u1ebfu kh\xf4ng t\xecm th\u1ea5y."),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Tree findElement(DataType x, Tree T)\n{\n    if (T == NULL || T->Data == x)\n        return T;\n\n    Tree lef = findElement(x, T->Left);\n    Tree rig = findElement(x, T->Right);\n    if (lef == NULL)\n        return rig;\n    return lef;\n}\n"))),(0,a.kt)("h2",{id:"problem-4-getdiameter"},"Problem 4 ",(0,a.kt)("strong",{parentName:"h2"},"getDiameter")),(0,a.kt)("p",null,"Ngo\xe0i ra, h\xe0m ",(0,a.kt)("inlineCode",{parentName:"p"},"max()")," tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t c\u1ee7a hai tham s\u1ed1 a, b c\u0169ng \u0111\xe3 \u0111\u01b0\u1ee3c c\xe0i \u0111\u1eb7t."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int max(int a, int b)\n")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m ",(0,a.kt)("inlineCode",{parentName:"p"},"getDiameter()")," t\xednh b\xe1n k\xednh c\u1ee7a m\u1ed9t c\xe2y nh\u1ecb ph\xe2n.\nB\xe1n k\xednh c\u1ee7a m\u1ed9t c\xe2y l\xe0 s\u1ed1 n\xfat tr\xean \u0111\u01b0\u1eddng \u0111i d\xe0i nh\u1ea5t gi\u1eefa hai n\xfat l\xe1 c\u1ee7a c\xe2y."),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int getHeight(Tree T)\n{\n    if (T == NULL || (T->Left == NULL && T->Right == NULL))\n        return 0;\n    int lh = getHeight(T->Left);\n    int rh = getHeight(T->Right);\n\n    return 1 + (lh > rh ? lh : rh);\n}\nvoid getDiameter(Tree T, int *r)\n{\n    if (T == NULL)\n        return;\n\n    *r = getHeight(T->Left) + getHeight(T->Right) + 3;\n}\n"))),(0,a.kt)("h2",{id:"problem-5-getfullnodes"},"Problem 5 ",(0,a.kt)("strong",{parentName:"h2"},"getFullNodes")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m getFullNodes() \u0111\u1ebfm s\u1ed1 n\xfat c\xf3 \u0111\u1ee7 hai con."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: m\u1ed9t c\xe2y t\xecm ki\u1ebfm nh\u1ecb ph\xe2n."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: s\u1ed1 n\xfat c\xf3 \u0111\u1ee7 hai con."),(0,a.kt)("p",null,"V\xed d\u1ee5:\nCho c\xe2y nh\u1ecb ph\xe2n T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                            6\n                       /        \\\n                    21         -53\n                      \\          /    \\\n                       3      -8     30\n                              /    \\\n                            49    17\n")),(0,a.kt)("p",null,"\u0110\u1ebfm s\u1ed1 n\xfat c\xf3 \u0111\u1ee7 hai con?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"C\xe2y T c\xf3 3 n\xfat c\xf3 \u0111\u1ee7 hai con.")),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int getFullNodes(Tree T)\n{\n    if (T == NULL || isLeaf(T))\n        return 0;\n\n    if (T->Left != NULL && T->Right != NULL)\n        return 1 + getFullNodes(T->Left) + getFullNodes(T->Right);\n\n    return getFullNodes(T->Left) + getFullNodes(T->Right);\n}\n"))),(0,a.kt)("h2",{id:"problem-6-converttree"},"Problem 6 ",(0,a.kt)("strong",{parentName:"h2"},"convertTree")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m convertTree() \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i m\u1ed9t c\xe2y nh\u1ecb ph\xe2n sang c\xe2y ph\u1ea3n chi\u1ebfu c\u1ee7a n\xf3."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: m\u1ed9t c\xe2y nh\u1ecb ph\xe2n T."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: c\xe2y ph\u1ea3n chi\u1ebfu c\u1ee7a T."),(0,a.kt)("p",null,"V\xed d\u1ee5:\nCho c\xe2y nh\u1ecb ph\xe2n T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                                  12\n                              /         \\\n                           24            7\n                             \\          /    \\\n                              10    32    -8\n                                     /    \\\n                                   5     48\n")),(0,a.kt)("p",null,"C\xe2y ph\u1ea3n chi\u1ebfu c\u1ee7a T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                                 12\n                              /        \\\n                           7           24\n                       /     \\        /\n                    -8      32   10\n                             /    \\\n                           48     5\n")),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Tree convertTree(Tree T)\n{\n    if (T == NULL)\n        return NULL;\n\n    Tree tree = (Tree)malloc(sizeof(struct Node));\n    tree->Data = T->Data;\n    tree->Left = convertTree(T->Right);\n    tree->Right = convertTree(T->Left);\n\n    return tree;\n}\n"))),(0,a.kt)("h2",{id:"problem-7-ismirrors"},"Problem 7 ",(0,a.kt)("strong",{parentName:"h2"},"isMirrors")),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m isMirrors() ki\u1ec3m tra xem hai c\xe2y c\xf3 l\xe0 ph\u1ea3n chi\u1ebfu c\u1ee7a nhau hay kh\xf4ng."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: hai c\xe2y nh\u1ecb ph\xe2n T1 v\xe0 T2."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: tr\u1ea3 v\u1ec1 1 n\u1ebfu c\xe2y T1 v\xe0 T2 l\xe0 ph\u1ea3n chi\u1ebfu c\u1ee7a nhau; tr\u1ea3 v\u1ec1 0 n\u1ebfu ng\u01b0\u1ee3c l\u1ea1i."),(0,a.kt)("p",null,"V\xed d\u1ee5:\nCho c\xe2y nh\u1ecb ph\xe2n T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                                  12\n                              /         \\\n                           24            7\n                             \\          /    \\\n                              10    32    -8\n                                     /    \\\n                                   5     48\n")),(0,a.kt)("p",null,"C\xe2y ph\u1ea3n chi\u1ebfu c\u1ee7a T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                                 12\n                              /        \\\n                           7           24\n                       /     \\        /\n                    -8      32   10\n                             /    \\\n                           48     5\n")),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int isMirrors(Tree t1, Tree t2)\n{\n    if (t1 == NULL)\n    {\n        if (t2 == NULL)\n            return 1;\n        return 0;\n    }\n    if (t2 == NULL)\n        return 0;\n    if (t2->Data != t1->Data)\n        return 0;\n    return isMirrors(t1->Left, t2->Right) && isMirrors(t1->Right, t2->Left);\n}\n"))),(0,a.kt)("h2",{id:"problem-8-printallpaths"},"Problem 8 ",(0,a.kt)("strong",{parentName:"h2"},"printAllPaths")),(0,a.kt)("p",null,"Ngo\xe0i ra, ",(0,a.kt)("inlineCode",{parentName:"p"},"h\xe0m printArray()")," in n\u1ed9i dung c\u1ee7a m\u1ed9t m\u1ea3ng path c\xf3 \u0111\u1ed9 d\xe0i len c\u0169ng \u0111\xe3 \u0111\u01b0\u1ee3c c\xe0i \u0111\u1eb7t."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'void printArray(int path[], int len){\n int i;\n for(i=0;i<len;i++)\n    printf("%d",path[i]);\n    printf("\\n");\n}\n')),(0,a.kt)("p",null,"B\u1eb1ng c\xe1ch s\u1eed d\u1ee5ng ki\u1ec3u d\u1eef li\u1ec7u c\xe2y nh\u1ecb ph\xe2n Tree \u0111\xe3 cho, h\xe3y vi\u1ebft h\xe0m printAllPaths() hi\u1ec3n th\u1ecb t\u1ea5t c\u1ea3 c\xe1c \u0111\u01b0\u1eddng \u0111i (t\u1eeb n\xfat g\u1ed1c \u0111\u1ebfn n\xfat l\xe1) v\xe0 c\xf3 \u0111\u1ed9 d\xe0i \u0111\u01b0\u1eddng \u0111i th\u1ecfa \u0111i\u1ec1u ki\u1ec7n cho tr\u01b0\u1edbc .\nD\u1eef li\u1ec7u \u0111\u1ea7u v\xe0o: m\u1ed9t c\xe2y nh\u1ecb ph\xe2n T, m\u1ed9t m\u1ea3ng path l\u01b0u c\xe1c gi\xe1 tr\u1ecb n\xfat c\u1ee7a \u0111\u01b0\u1eddng \u0111i, k\xedch th\u01b0\u1edbc c\u1ee7a m\u1ea3ng len l\u01b0u s\u1ed1 n\xfat c\u1ee7a \u0111\u01b0\u1eddng \u0111i, \u0111\u1ed9 d\xe0i \u0111\u01b0\u1eddng \u0111i c\u1ea7n t\xecm pathlen."),(0,a.kt)("p",null,"D\u1eef li\u1ec7u \u0111\u1ea7u ra: kh\xf4ng."),(0,a.kt)("p",null,"V\xed d\u1ee5:\nC ho c\xe2y nh\u1ecb ph\xe2n T:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"                           12\n                       /         \\\n                    24            7\n                      \\          /    \\\n                       10    32    -8\n                              /    \\\n                            5     48\n")),(0,a.kt)("p",null,"C\u1ea7n t\xecm c\xe1c \u0111\u01b0\u1eddng \u0111i t\u1eeb n\xfat g\u1ed1c \u0111\u1ebfn n\xfat l\xe1 v\xe0 c\xf3 \u0111\u1ed9 d\xe0i b\u1eb1ng 2?"),(0,a.kt)("p",null,"C\xe1c \u0111\u01b0\u1eddng \u0111i t\u1eeb n\xfat g\u1ed1c \u0111\u1ebfn n\xfat l\xe1 c\xf3 \u0111\u1ed9 d\xe0i b\u1eb1ng 2 l\xe0:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"12 24 10\n12 7 -8\n")),(0,a.kt)("admonition",{title:"Solution",type:"success"},(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void printAllPaths(Tree T, int path[], int len, int pathlen)\n{\n    if (T == NULL || len > pathlen + 1)\n        return;\n    path[len] = T->Data;\n    len++;\n\n    if (len == pathlen + 1 && isLeaf(T))\n        printArray(path, len);\n\n    printAllPaths(T->Left, path, len, pathlen);\n    printAllPaths(T->Right, path, len, pathlen);\n}\n"))))}h.isMDXComponent=!0}}]);