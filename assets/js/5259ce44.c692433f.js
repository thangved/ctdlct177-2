"use strict";(self.webpackChunkctdlct_177_2=self.webpackChunkctdlct_177_2||[]).push([[6080],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,N=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?i.createElement(N,l(l({ref:t},c),{},{components:n})):i.createElement(N,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var s=2;s<o;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var i=n(7462),a=(n(7294),n(4137));const o={sidebar_position:2},l="C\xe1c ph\xe9p to\xe1n tr\xean danh s\xe1ch li\xean k\u1ebft c\xe1c s\u1ed1 nguy\xean",r={unversionedId:"adts-pointerlist/default-function",id:"adts-pointerlist/default-function",title:"C\xe1c ph\xe9p to\xe1n tr\xean danh s\xe1ch li\xean k\u1ebft c\xe1c s\u1ed1 nguy\xean",description:"C\xe1c ph\xe9p to\xe1n c\u01a1 b\u1ea3n",source:"@site/docs/adts-pointerlist/default-function.md",sourceDirName:"adts-pointerlist",slug:"/adts-pointerlist/default-function",permalink:"/docs/adts-pointerlist/default-function",draft:!1,editUrl:"https://github.com/thangved/datastructure/docs/adts-pointerlist/default-function.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"T\u1ed5ng quan",permalink:"/docs/adts-pointerlist/intro"},next:{title:"\xc1p d\u1ee5ng danh s\xe1ch li\xean k\u1ebft c\xe1c s\u1ed1 nguy\xean (ELSE)",permalink:"/docs/adts-pointerlist/apply"}},p={},s=[{value:"C\xe1c ph\xe9p to\xe1n c\u01a1 b\u1ea3n",id:"c\xe1c-ph\xe9p-to\xe1n-c\u01a1-b\u1ea3n",level:2},{value:"deleteList",id:"deletelist",level:3},{value:"emptyList",id:"emptylist",level:3},{value:"endList",id:"endlist",level:3},{value:"first",id:"first",level:3},{value:"insertList",id:"insertlist",level:3},{value:"locate",id:"locate",level:3},{value:"makenullList",id:"makenulllist",level:3},{value:"myLocate",id:"mylocate",level:3},{value:"next",id:"next",level:3},{value:"previous",id:"previous",level:3},{value:"retrieve",id:"retrieve",level:3},{value:"C\xe1c ph\xe9p to\xe1n kh\xe1c",id:"c\xe1c-ph\xe9p-to\xe1n-kh\xe1c",level:2},{value:"addFirst",id:"addfirst",level:3},{value:"append",id:"append",level:3},{value:"copyEvenNumbers",id:"copyevennumbers",level:3},{value:"deleteX",id:"deletex",level:3},{value:"difference",id:"difference",level:3},{value:"erase",id:"erase",level:3},{value:"getAvg",id:"getavg",level:3},{value:"intersection",id:"intersection",level:3},{value:"member",id:"member",level:3},{value:"normalize",id:"normalize",level:3},{value:"printList",id:"printlist",level:3},{value:"printOddNumbers",id:"printoddnumbers",level:3},{value:"readSet",id:"readset",level:3},{value:"removeAll",id:"removeall",level:3},{value:"readList",id:"readlist",level:3},{value:"sort",id:"sort",level:3},{value:"unionSet",id:"unionset",level:3}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c\xe1c-ph\xe9p-to\xe1n-tr\xean-danh-s\xe1ch-li\xean-k\u1ebft-c\xe1c-s\u1ed1-nguy\xean"},"C\xe1c ph\xe9p to\xe1n tr\xean danh s\xe1ch li\xean k\u1ebft c\xe1c s\u1ed1 nguy\xean"),(0,a.kt)("h2",{id:"c\xe1c-ph\xe9p-to\xe1n-c\u01a1-b\u1ea3n"},"C\xe1c ph\xe9p to\xe1n c\u01a1 b\u1ea3n"),(0,a.kt)("h3",{id:"deletelist"},"deleteList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"X\xf3a ph\u1ea7n t\u1eed c\xf3 ",(0,a.kt)("inlineCode",{parentName:"p"},"Position P"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void deleteList(Position P, List *pL)\n{\n    Position Temp;\n    if (P->Next != NULL)\n    {\n        Temp = P->Next;\n        P->Next = Temp->Next;\n        free(Temp);\n    }\n}\n")),(0,a.kt)("h3",{id:"emptylist"},"emptyList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Ki\u1ec3m tra danh s\xe1ch r\u1ed7ng.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int emptyList(List L)\n{\n    return L->Next == NULL;\n}\n")),(0,a.kt)("h3",{id:"endlist"},"endList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed sau v\u1ecb tr\xed cu\u1ed1i c\xf9ng c\u1ee7a danh s\xe1ch ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position endList(List L)\n{\n    Position P = L;\n    while (1)\n    {\n        if (P->Next == NULL)\n            return P;\n        P = P->Next;\n    }\n}\n")),(0,a.kt)("h3",{id:"first"},"first"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed \u0111\u1ea7u ti\xean c\u1ee7a danh s\xe1ch ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position first(List L)\n{\n    return L;\n}\n")),(0,a.kt)("h3",{id:"insertlist"},"insertList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Ch\xe8n th\xeam ph\u1ea7n t\u1eed v\xe0o v\u1ecb tr\xed ",(0,a.kt)("inlineCode",{parentName:"p"},"P"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void insertList(ElementType x, Position P, List *pL)\n{\n    Position T;\n    T = (Position)malloc(sizeof(struct Node));\n    T->Element = x;\n    T->Next = P->Next;\n    P->Next = T;\n}\n")),(0,a.kt)("h3",{id:"locate"},"locate"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed \u0111\u1ea7u ti\xean c\u1ee7a ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," trong danh s\xe1ch ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position locate(ElementType x, List L)\n{\n    Position P = L;\n    while (P->Next != NULL)\n    {\n        if (P->Next->Element == x)\n            return P;\n        P = P->Next;\n    }\n    return P;\n}\n")),(0,a.kt)("h3",{id:"makenulllist"},"makenullList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Kh\u1edfi t\u1ea1o danh s\xe1ch r\u1ed7ng.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void makenullList(List *pL)\n{\n    *pL = (List)malloc(sizeof(struct Node));\n    (*pL)->Next = NULL;\n}\n")),(0,a.kt)("h3",{id:"mylocate"},"myLocate"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed th\u1ee9 ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," c\u1ee7a ph\u1ea7n t\u1eed ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," trong danh s\xe1ch ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position myLocate(ElementType x, int i, List L)\n{\n    Position P = L;\n    int count = 0;\n    while (P->Next != NULL)\n    {\n        if (P->Next->Element == x)\n            count++;\n        if (count == i)\n            return P->Next;\n        P = P->Next;\n    }\n    return P->Next;\n}\n")),(0,a.kt)("h3",{id:"next"},"next"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed ti\u1ebfp theo c\u1ee7a ",(0,a.kt)("inlineCode",{parentName:"p"},"P"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position next(Position P, List L)\n{\n    return P->Next;\n}\n")),(0,a.kt)("h3",{id:"previous"},"previous"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 v\u1ecb tr\xed tr\u01b0\u1edbc ",(0,a.kt)("inlineCode",{parentName:"p"},"P"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"Position previous(Position P, List L)\n{\n    Position Q = L;\n    while (Q->Next->Next != NULL)\n    {\n        if (Q->Next->Next == P)\n            Q = Q->Next;\n    }\n    return Q->Next;\n}\n")),(0,a.kt)("h3",{id:"retrieve"},"retrieve"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Tr\u1ea3 v\u1ec1 gi\xe1 tr\u1ecb c\u1ee7a ph\u1ea7n t\u1eed c\xf3 v\u1ecb tr\xed ",(0,a.kt)("inlineCode",{parentName:"p"},"P"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ElementType retrieve(Position P, List L)\n{\n    if (P->Next != NULL)\n        return P->Next->Element;\n}\n")),(0,a.kt)("h2",{id:"c\xe1c-ph\xe9p-to\xe1n-kh\xe1c"},"C\xe1c ph\xe9p to\xe1n kh\xe1c"),(0,a.kt)("h3",{id:"addfirst"},"addFirst"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Th\xeam ph\u1ea7n t\u1eed v\xe0o \u0111\u1ea7u danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void addFirst(ElementType x, List *pL)\n{\n    Position P;\n    P = (Position)malloc(sizeof(struct Node));\n    P->Element = x;\n    P->Next = (*pL)->Next;\n    (*pL)->Next = P;\n}\n")),(0,a.kt)("h3",{id:"append"},"append"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Th\xeam ph\u1ea7n t\u1eed v\xe0o cu\u1ed1i danh s\xe1ch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void append(ElementType x, List *pL)\n{\n    Position P = endList(*pL);\n    Position T = (Position)malloc(sizeof(struct Node));\n    T->Element = x;\n    T->Next = NULL;\n    P->Next = T;\n}\n")),(0,a.kt)("h3",{id:"copyevennumbers"},"copyEvenNumbers"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Sao ch\xe9p s\u1ed1 ch\u1eb5n trong danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void copyEvenNumbers(List L, List *pL)\n{\n    makenullList(pL);\n    Position P = L;\n    while (P->Next != NULL)\n    {\n        if (P->Next->Element % 2 == 0)\n            append(P->Next->Element, pL);\n        P = P->Next;\n    }\n}\n")),(0,a.kt)("h3",{id:"deletex"},"deleteX"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"X\xf3a ph\u1ea7n t\u1eed x.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void deleteX(ElementType x, List *pL)\n{\n    Position P = first(*pL);\n    while (P != endList(*pL))\n    {\n        if (retrieve(P, *pL) == x)\n            deleteList(P, pL);\n        else\n            P = next(P, *pL);\n    }\n}\n")),(0,a.kt)("h3",{id:"difference"},"difference"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"T\xecm t\u1eadp hi\u1ec7u.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"List difference(List L1, List L2)\n{\n    List L;\n    makenullList(&L);\n    Position P = L1;\n    while (P->Next != NULL)\n    {\n        if (!member(P->Next->Element, L) && !member(P->Next->Element, L2))\n            append(P->Next->Element, &L);\n        P = P->Next;\n    }\n    return L;\n}\n")),(0,a.kt)("h3",{id:"erase"},"erase"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"X\xf3a ph\u1ea7n t\u1eed x \u0111\u1ea7u ti\xean.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void erase(ElementType x, List *pL)\n{\n    if (locate(x, *pL)->Next != NULL)\n        deleteList(locate(x, *pL), pL);\n}\n")),(0,a.kt)("h3",{id:"getavg"},"getAvg"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"T\xednh trung b\xecnh c\u1ed9ng c\u1ee7a danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"float getAvg(List L)\n{\n    float sum = 0;\n    int length = 0;\n    Position P = L;\n    if (P->Next == NULL)\n        return -10000;\n    while (P->Next != NULL)\n    {\n        sum += P->Next->Element;\n        length++;\n        P = P->Next;\n    }\n    return sum / length;\n}\n")),(0,a.kt)("h3",{id:"intersection"},"intersection"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"T\xecm t\u1eadp giao c\u1ee7a hai t\u1eadp.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"List intersection(List L1, List L2)\n{\n    List L;\n    makenullList(&L);\n    Position P = L2;\n    while (P->Next != NULL)\n    {\n        if (!member(P->Next->Element, L) && member(P->Next->Element, L1))\n            append(P->Next->Element, &L);\n        P = P->Next;\n    }\n    return L;\n}\n")),(0,a.kt)("h3",{id:"member"},"member"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Ki\u1ec3m tra m\u1ed9t gi\xe1 tr\u1ecb c\xf3 trong danh s\xe1ch kh\xf4ng.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int member(ElementType x, List L)\n{\n    Position P = L;\n    while (P->Next != NULL)\n    {\n        if (P->Next->Element == x)\n            return 1;\n        P = P->Next;\n    }\n    return 0;\n}\n")),(0,a.kt)("h3",{id:"normalize"},"normalize"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"X\xf3a c\xe1c ph\u1ea7n t\u1eed tr\xf9ng gi\xe1 tr\u1ecb.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void normalize(List *pL)\n{\n    Position P = *pL, Q;\n    while (P->Next != NULL)\n    {\n        Q = P->Next;\n        while (Q->Next != NULL)\n        {\n            if (Q->Next->Element == P->Next->Element)\n                deleteList(Q, pL);\n            Q = Q->Next;\n        }\n        P = P->Next;\n    }\n}\n")),(0,a.kt)("h3",{id:"printlist"},"printList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'void printList(List L)\n{\n    Position P = L;\n    while (P->Next != NULL)\n    {\n        printf("%d ", P->Next->Element);\n        P = P->Next;\n    }\n    printf("\\n");\n}\n')),(0,a.kt)("h3",{id:"printoddnumbers"},"printOddNumbers"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In c\xe1c s\u1ed1 l\u1ebb trong danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'void printOddNumbers(List L)\n{\n    Position P = L;\n    while (P->Next != NULL)\n    {\n        if (P->Next->Element % 2 != 0)\n            printf("%d ", P->Next->Element);\n        P = P->Next;\n    }\n    printf("\\n");\n}\n')),(0,a.kt)("h3",{id:"readset"},"readSet"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Nh\u1eadp t\u1eadp h\u1ee3p.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'List readSet()\n{\n    List L;\n    makenullList(&L);\n    int n, x;\n    scanf("%d", &n);\n    for (int i = 0; i < n; i++)\n    {\n        scanf("%d", &x);\n        if (!member(x, L))\n            addFirst(x, &L);\n    }\n    return L;\n}\n')),(0,a.kt)("h3",{id:"removeall"},"removeAll"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"X\xf3a t\u1ea5t c\u1ea3 c\xe1c ph\u1ea7n t\u1eed c\xf3 gi\xe1 tr\u1ecb ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void removeAll(ElementType x, List *pL)\n{\n    while (locate(x, *pL)->Next != NULL)\n        deleteList(locate(x, *pL), pL);\n}\n")),(0,a.kt)("h3",{id:"readlist"},"readList"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Nh\u1eadp danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'void readList(List *pL)\n{\n    makenullList(pL);\n    int n;\n    Position P = *pL,\n             N;\n    scanf("%d", &n);\n    for (int i = 0; i < n; i++)\n    {\n        N = (Position)malloc(sizeof(struct Node));\n        scanf("%d", &N->Element);\n        P->Next = N;\n        P = P->Next;\n    }\n}\n')),(0,a.kt)("h3",{id:"sort"},"sort"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"S\u1eafp x\u1ebfp danh s\xe1ch.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void sort(List *pL)\n{\n    Position P = *pL,\n             N;\n    while (P->Next != NULL)\n    {\n        N = P->Next;\n        while (N->Next != NULL)\n        {\n            :::info Y\xeau c\u1ea7u\n            if (P->Next->Element N->Next->Element)\n            :::\n            {\n                ElementType Temp = P->Next->Element;\n                P->Next->Element = N->Next->Element;\n                N->Next->Element = Temp;\n            }\n            N = N->Next;\n        }\n        P = P->Next;\n    }\n}\n")),(0,a.kt)("h3",{id:"unionset"},"unionSet"),(0,a.kt)("admonition",{title:"Y\xeau c\u1ea7u",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"G\u1ed9p 2 t\u1eadp h\u1ee3p.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"List unionSet(List L1, List L2)\n{\n    List L;\n    makenullList(&L);\n    Position P = L1;\n    while (P->Next != NULL)\n    {\n        if (!member(P->Next->Element, L))\n            append(P->Next->Element, &L);\n        P = P->Next;\n    }\n    P = L2;\n    while (P->Next != NULL)\n    {\n        if (!member(P->Next->Element, L))\n            append(P->Next->Element, &L);\n        P = P->Next;\n    }\n    return L;\n}\n")))}d.isMDXComponent=!0}}]);